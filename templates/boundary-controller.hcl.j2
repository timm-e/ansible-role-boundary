disable_mlock = {{ boundary_disable_mlock | lower }}

controller {
  name = "{{ ansible_hostname }}"
  description = "Boundary controller."

  database {
{% for option, value in boundary_database.items() %}
    {{ option }} = "{{ value }}"
{% endfor %}
  }
{% for option, value in boundary_controller_parameters.items() %}
  {{ option }} = "{{ value }}"
{% endfor %}
}

# localhost API listener
#listener "tcp" {
#  address = "127.0.0.1:9200"
#  purpose = "api"
#  tls_disable = true
#}

# Public API listener configuration blocks
listener "tcp" {
  # Should be the address of the NIC that the controller server will be reached on
  # address = "{{ boundary_address }}:9200"
  # The purpose of this listener block
  purpose = "api"

  # TLS configuration
{% if boundary_tls_disable == "true" %}
  tls_disable = {{ boundary_tls_disable | lower }}
{% else %}
  tls_cert_file = "{{ boundary_api_tls_cert_file }}"
  tls_key_file = "{{ boundary_api_tls_key_file }}"
{% if boundary_tls_ca_file_src is defined or boundary_tls_ca_content is defined %}
  tls_ca_file = "{{ boundary_api_tls_ca_file }}"
{% endif %}
{% endif %}
{% for option, value in boundary_api_listener_parameters.items() %}
  {{ option }} = "{{ value }}"
{% endfor %}

  # Enable CORS for the Admin UI
  cors_enabled = {{ boundary_cors_enabled | lower }}
{% if boundary_cors_enabled %}
  cors_allowed_origins = [
{% for origin in boundary_cors_allowed_origins %}
    "{{ origin }}",
{% endfor %}
  ]
{% endif %}
}

# Data-plane listener configuration block (used for worker coordination)
listener "tcp" {
  # Should be the IP of the NIC that the worker will connect on
  address = "{{ boundary_address }}:9201"
  # The purpose of this listener
  purpose = "cluster"
{% for option, value in boundary_cluster_listener_parameters.items() %}
  {{ option }} = "{{ value }}"
{% endfor %}
}

# prometheus metrics endpoint
listener "tcp" {
  address = "{{ boundary_address }}:9203"
  purpose = "ops"
  tls_disable = true
}

{% for purpose in ['root', 'worker-auth', 'recovery'] %}
kms "{{ boundary_kms_type }}" {
  purpose = "{{ purpose }}"
{% for param, value in boundary_kms[purpose].items() %}
  {{ param }} = "{{ value }}"
{% endfor %}
}
{% endfor %}
